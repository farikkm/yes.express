import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Trash2Icon, EditIcon } from "lucide-react";
import { Dialog, DialogContent, DialogTitle, DialogDescription } from "@/components/ui/dialog";

interface PaymentMethod {
  id: number;
  cardNumber: string;
  expiryDate: string;
  cardHolder: string;
}

const PaymentMethods = () => {
  const [paymentMethods, setPaymentMethods] = useState<PaymentMethod[]>([
    { id: 1, cardNumber: "1234 5678 9876 5432", expiryDate: "12/25", cardHolder: "John Doe" },
    { id: 2, cardNumber: "9876 5432 1234 5678", expiryDate: "06/23", cardHolder: "Jane Smith" },
  ]);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [currentPaymentMethod, setCurrentPaymentMethod] = useState<PaymentMethod | null>(null);

  const handleAddPaymentMethod = () => {
    setIsModalOpen(true);
    setCurrentPaymentMethod(null); // –û—á–∏—Å—Ç–∏—Ç—å —Ñ–æ—Ä–º—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –º–µ—Ç–æ–¥–∞
  };

  const handleEditPaymentMethod = (method: PaymentMethod) => {
    setIsModalOpen(true);
    setCurrentPaymentMethod(method);
  };

  const handleDeletePaymentMethod = (id: number) => {
    setPaymentMethods(prev => prev.filter(method => method.id !== id));
  };

  const handleSavePaymentMethod = (method: PaymentMethod) => {
    if (currentPaymentMethod) {
      setPaymentMethods(prev => prev.map(m => (m.id === currentPaymentMethod.id ? method : m)));
    } else {
      setPaymentMethods(prev => [...prev, { ...method, id: Date.now() }]); // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º id
    }
    setIsModalOpen(false);
  };

  return (
    <div className="max-w-2xl mx-auto">
      <h2 className="text-2xl font-semibold mb-4">üí≥ –ú–µ—Ç–æ–¥—ã –æ–ø–ª–∞—Ç—ã</h2>

      <Button variant="outline" onClick={handleAddPaymentMethod}>
        –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã
      </Button>

      <div className="mt-6 space-y-4">
        {paymentMethods.map(method => (
          <Card key={method.id}>
            <CardContent className="flex justify-between items-center">
              <div>
                <div>–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: **** **** **** {method.cardNumber.slice(-4)}</div>
                <div>–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {method.expiryDate}</div>
                <div>–í–ª–∞–¥–µ–ª–µ—Ü –∫–∞—Ä—Ç—ã: {method.cardHolder}</div>
              </div>
              <div className="flex space-x-2">
                <Button variant="outline" size="sm" onClick={() => handleEditPaymentMethod(method)}>
                  <EditIcon className="w-4 h-4" />
                </Button>
                <Button variant="outline" size="sm" onClick={() => handleDeletePaymentMethod(method.id)}>
                  <Trash2Icon className="w-4 h-4" />
                </Button>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã */}
      <Dialog open={isModalOpen} onOpenChange={setIsModalOpen}>
        <DialogContent>
          <DialogTitle>{currentPaymentMethod ? "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã" : "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã"}</DialogTitle>
          <DialogDescription>
            –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã.
          </DialogDescription>
          <PaymentMethodForm
            initialData={currentPaymentMethod}
            onSave={handleSavePaymentMethod}
            onCancel={() => setIsModalOpen(false)}
          />
        </DialogContent>
      </Dialog>
    </div>
  );
};

// –§–æ—Ä–º–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã
const PaymentMethodForm = ({
  initialData,
  onSave,
  onCancel,
}: {
  initialData: PaymentMethod | null;
  onSave: (method: PaymentMethod) => void;
  onCancel: () => void;
}) => {
  const [cardNumber, setCardNumber] = useState(initialData?.cardNumber || "");
  const [expiryDate, setExpiryDate] = useState(initialData?.expiryDate || "");
  const [cardHolder, setCardHolder] = useState(initialData?.cardHolder || "");

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    onSave({ id: initialData ? initialData.id : Date.now(), cardNumber, expiryDate, cardHolder });
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      <div className="space-y-2">
        <Label htmlFor="cardNumber">–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã</Label>
        <Input
          id="cardNumber"
          value={cardNumber}
          onChange={(e) => setCardNumber(e.target.value)}
          placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã"
        />
      </div>

      <div className="space-y-2">
        <Label htmlFor="expiryDate">–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è</Label>
        <Input
          id="expiryDate"
          value={expiryDate}
          onChange={(e) => setExpiryDate(e.target.value)}
          placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è (MM/YY)"
        />
      </div>

      <div className="space-y-2">
        <Label htmlFor="cardHolder">–í–ª–∞–¥–µ–ª–µ—Ü –∫–∞—Ä—Ç—ã</Label>
        <Input
          id="cardHolder"
          value={cardHolder}
          onChange={(e) => setCardHolder(e.target.value)}
          placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞—Ä—Ç—ã"
        />
      </div>

      <div className="pt-4 flex space-x-4">
        <Button type="button" variant="outline" onClick={onCancel}>
          –û—Ç–º–µ–Ω–∏—Ç—å
        </Button>
        <Button type="submit">{initialData ? "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å" : "–î–æ–±–∞–≤–∏—Ç—å"}</Button>
      </div>
    </form>
  );
};

export default PaymentMethods;
